<?xml version="1.0" encoding="UTF-8"?>
<!--
This file contains information about the mirrors to monitor
		- login/password and user to access repositories
		- primary mirror url (master mirror)
		- secondary mirror urls (secondary mirrors to monitor)
-->
<mirrormetrics>
	<!--
		USER AUTHENTICATION
		===================
		The first user is to be considered the default user and it should match a
		common account for all the mirrors.
		For convenience, and because the mirror list will probably be generated
		automatically which will make more difficult to specify a specific account
		per mirror as explained below, alternative user accounts can be listed 
		below. When the access is not granted for the default user, then the
		program will try an alternative user account. Adding random user accounts
		will greatly decrease the performance, you have been warned.
		
		Any user node contains either a passwd element or a dsakey element for 
		authentication purposes. If the user node misses the inner authentication node
		it will be interpreted as an empty password (the same when the passwd attribute
		is missing).
		
		The attribute realname is optional.
	 -->
	 <!-- an user authenticated with a passwd -->
	<user login="anonymous" realname="Anonymous User">
		<passwd>edos-project@mandriva.com</passwd>
	</user>
	<!--
		(!) add alternate users here (available for all mirrors that do not specify a user)
       		users can also be embedded into *mirror tags for access by server
	-->	
	
	
	
	<!-- 
		MIRROR LISTING
		==============
		there are some sources on the network which can be requested a mirror listing
		multiple listing are supported, with multiple access (protocols and paths)
	 -->
	<listing host="www1.mandrivalinux.com">
		<access protocol="http" path="/mirrorsfull.list"/>
	</listing>
	
	
	<!-- 
		ANALYSIS
		========
		This configuration affects the range of information gathered from the mirrors
		hence the resulting file (and object) sizes.
		 
		2 levels of depth logging are available:
			1. skeleton		only the directories are taken into account
			2. complete		all files
			
		Also 2 levels of verbosity are available:
			1. low			only file names are taken into account
			2. high			files names, timestamp and file sizes are considered
			
		The default is complete+high which gives the MAXIMUM information.
	 -->
	<analysis depth="skeleton" verbosity="low"/>
	 
	 <!--
	 	STORAGE
	 	=======
	 	This configuration states how the storage is performed. As of today 2 models
	 	are available:
	 		1. tree		Tree-based (building on a DOM tree)
	 		2. table	Table-based aka flat (to store in a relational database)
	 	   [3. both		replication of data (may be for debugging purposes) ; not implemented]
	 	
	 	Table-based storage use MySQL database. An user host/login/password must be provided	 	   
	 	   
	 -->
    <storage type="tree" />
	 
	 <!--
	 	MIRROR DELTA (TUNING)
	 	============
	 	To avoid data replication within the database as much as possible, the full
	 	structure may not be stored each time. Instead, a mirror "delta" representing
	 	only the changes occurred from the latest full structure is stored.
	 	This configuration parameter allows the user to define how many changes are
	 	necessary to opt to store the (next) full structure instead of its delta.
	 	
	 	This is a tuning option.
	 -->
	 <delta limit="100"/>
	
	
	<!--
		DOWNLOAD and SCHEDULING
		=======================
		The mirrors will be visited on a regular basis to keep in sync and to insure
		pertinent historical data to gather statistics. The schedule configures the
		cycling time (over all the mirrors).
		
		The following properties can be set:
			. frequency		tells each how many hours a new download starts
			. cron 			defines a cron expression (see UNIX cron)
			
		When both exist, the cron expression takes the precedence and the frequency
		is discarded (cron being syntactically more explicit it gets more ears).
		
		These values define an INTENT to download information about a mirror
		at a particular frequency. However, if the mirror monitor has n mirrors to 
		visit it must COMPLETE ALL MIRRORS FIRST before it cycles again.
		
		For example, if the frequency is defined as 4 hours (each 4 hours) and it 
		takes 10 hours to complete all the downloads given the hardware and network
		conditions, then the effective cycle is 10 hours and the program behaves as
		if the configuration was set with a frequency of 10 hours.
		However, if the network conditions improve, the program will speed up as
		much as possible in order to meet the preferred frequency of 4 hours. It will
		never try to do better than 4 hours.
		
		If the mirror monitor has some more resources available (eg. bandwith),
		it will then take into account cron expressions defined for a specific mirror.
		(See below the mirror section). 
	-->
	<schedule>
		<frequency hours="24"/>
		<cron expression="15 0/2 * * * ?"/>
	</schedule>
	
	
	<!--
		LOGGING
		=======
		The Mirror Monitoring program uses Log4j to handle event logging. 
		The configuration settings are defined in a separate file. Change the next
		line if you prefer to point to another one (ex. for testing).
	-->
	<logging type="log4j" config="log4j-config-4testing.xml" />
	
	<!-- 
		BASE PATH
		=========
		Directory (relative to the app dir) from which the files are stored.
		The base path must always start with a '/' character (slash).
		eg. / means right where the application resides.
	-->
	<basepath dir="/"/>
	
	<!--
		MIRRORS
		=======
		any mirror can specify a user account to be used in order to connect
		When a user account is specified it discards completely the default user
		account and all its alternatives (see above).
		
		cron expressions can exist inside
	-->
	
	<!--
		 The master mirror is publishes the "official" version (or state) of the mirrors
		 There can only be one master mirror, a base to compare to.
		 For a faster bootstrap the master mirror would best be a close-by host.
	 -->
	<mastermirror name="Master@testmachine" host="testmachine">
		<!-- many accesses can exist -->
		<access protocol="ssh" path="/var/ftp/pub/Mandrivalinux/media"/>

		<!-- change this with your own dsa key registered with Kenobi if you have one -->
		<user login="edos" realname="The Mandriva Mirror Monitoring program">
			<dsakey path="~/.ssh/edos@edos-project.org_dsa"/>
		</user>
	</mastermirror>
	
	
	<!--
		List of directories to monitor
		(instead of looking at the whole tree, the user chooses some repositories 
		aka. directories to watch and to monitor over time)	
	-->
	<monitor>
		<dir path="/main/media_info"/>
		<dir path="/main/updates/media_info"/>
	</monitor>
	
	
	<!-- A secondary mirror is a target for monitoring -->
    <secondarymirror name="Mirror_01@testmachine" host="testmachine">
		<!-- many accesses can exist -->
		<access protocol="ftp" path="/cooker/cooker"/>
		
		<!-- download every hour (optional element) -->
		<cron expression="0 0/1 * * * ?"/>
	</secondarymirror>
	
	<!-- simulate a distinct mirror -->
    <secondarymirror name="Mirror_02@testmachine" host="localhost">
		<access protocol="ftp" path="/cooker/cooker"/>
	</secondarymirror>
	
</mirrormetrics>
